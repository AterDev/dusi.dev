// <auto-generated />
using System;
using EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Http.API.Migrations
{
    [DbContext(typeof(CommandDbContext))]
    [Migration("20230128090813_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.EntityBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SystemRoleSystemUser", b =>
                {
                    b.Property<Guid>("SystemRolesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("SystemRolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SystemRoleSystemUser");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityLibrary", b =>
                {
                    b.HasBaseType("Core.Models.EntityBase");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("IsPublic");

                    b.HasIndex("Name");

                    b.HasIndex("UserId");

                    b.ToTable("EntityLibraries");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityMember", b =>
                {
                    b.HasBaseType("Core.Models.EntityBase");

                    b.Property<int>("AccessModifier")
                        .HasColumnType("integer");

                    b.Property<bool>("CanSet")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("DictionaryKeyType")
                        .HasColumnType("integer");

                    b.Property<int?>("DictionaryValueType")
                        .HasColumnType("integer");

                    b.Property<Guid>("EntityModelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsEnum")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsList")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsObject")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("MemberType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<bool>("NeedInit")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ObjectTypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("AccessModifier");

                    b.HasIndex("EntityModelId");

                    b.HasIndex("Name");

                    b.HasIndex("ObjectTypeId")
                        .IsUnique();

                    b.ToTable("EntityMembers");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityMemberConstraint", b =>
                {
                    b.HasBaseType("Core.Models.EntityBase");

                    b.Property<Guid>("EntityMemberId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<long?>("Max")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxLength")
                        .HasColumnType("integer");

                    b.Property<int?>("Min")
                        .HasColumnType("integer");

                    b.Property<int?>("MinLength")
                        .HasColumnType("integer");

                    b.HasIndex("EntityMemberId")
                        .IsUnique();

                    b.ToTable("EntityMemberConstraints");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityModel", b =>
                {
                    b.HasBaseType("Core.Models.EntityBase");

                    b.Property<int>("AccessModifier")
                        .HasColumnType("integer");

                    b.Property<string>("CodeExample")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("CodeLanguage")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("EntityLibraryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<Guid?>("ParentEntityId")
                        .HasColumnType("uuid");

                    b.HasIndex("AccessModifier");

                    b.HasIndex("CodeLanguage");

                    b.HasIndex("EntityLibraryId");

                    b.HasIndex("Name");

                    b.HasIndex("ParentEntityId");

                    b.ToTable("EntityModels");
                });

            modelBuilder.Entity("Core.Entities.SystemRole", b =>
                {
                    b.HasBaseType("Core.Models.EntityBase");

                    b.Property<string>("Icon")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("NameValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Name");

                    b.ToTable("SystemRoles");
                });

            modelBuilder.Entity("Core.Entities.SystemUser", b =>
                {
                    b.HasBaseType("Core.Models.EntityBase");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastLoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RealName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("Sex")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Email");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("UserName");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("Core.Entities.WebConfig", b =>
                {
                    b.HasBaseType("Core.Models.EntityBase");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Valid")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("WebConfigs");
                });

            modelBuilder.Entity("SystemRoleSystemUser", b =>
                {
                    b.HasOne("Core.Entities.SystemRole", null)
                        .WithMany()
                        .HasForeignKey("SystemRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SystemUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityLibrary", b =>
                {
                    b.HasOne("Core.Entities.SystemUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityMember", b =>
                {
                    b.HasOne("Core.Entities.EntityDesign.EntityModel", "EntityModel")
                        .WithMany("EntityMembers")
                        .HasForeignKey("EntityModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EntityDesign.EntityModel", "ObjectType")
                        .WithOne()
                        .HasForeignKey("Core.Entities.EntityDesign.EntityMember", "ObjectTypeId");

                    b.Navigation("EntityModel");

                    b.Navigation("ObjectType");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityMemberConstraint", b =>
                {
                    b.HasOne("Core.Entities.EntityDesign.EntityMember", "EntityMember")
                        .WithOne("Constraint")
                        .HasForeignKey("Core.Entities.EntityDesign.EntityMemberConstraint", "EntityMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityMember");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityModel", b =>
                {
                    b.HasOne("Core.Entities.EntityDesign.EntityLibrary", "EntityLibrary")
                        .WithMany("EntityModels")
                        .HasForeignKey("EntityLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.EntityDesign.EntityModel", "ParentEntity")
                        .WithMany("ChildrenEntities")
                        .HasForeignKey("ParentEntityId");

                    b.Navigation("EntityLibrary");

                    b.Navigation("ParentEntity");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityLibrary", b =>
                {
                    b.Navigation("EntityModels");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityMember", b =>
                {
                    b.Navigation("Constraint");
                });

            modelBuilder.Entity("Core.Entities.EntityDesign.EntityModel", b =>
                {
                    b.Navigation("ChildrenEntities");

                    b.Navigation("EntityMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
